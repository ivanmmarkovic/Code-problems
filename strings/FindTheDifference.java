package strings;

import java.util.HashMap;
import java.util.Map;

/*
389. Find the Difference
Easy

https://leetcode.com/problems/find-the-difference/

Runtime: 19 ms, faster than 7.23% of Java online submissions for Find the Difference.
Memory Usage: 42.2 MB, less than 10.86% of Java online submissions for Find the Difference.

You are given two strings s and t.

String t is generated by random shuffling string s and then add one more letter at a random position.

Return the letter that was added to t.

 

Example 1:

Input: s = "abcd", t = "abcde"
Output: "e"
Explanation: 'e' is the letter that was added.

Example 2:

Input: s = "", t = "y"
Output: "y"

 

Constraints:

    0 <= s.length <= 1000
    t.length == s.length + 1
    s and t consist of lowercase English letters.

Accepted
354,452
Submissions
587,681


*/
public class FindTheDifference {
	
	public char findTheDifference(String s, String t) {
        Map<Character, Integer> charss = new HashMap<>();
        Map<Character, Integer> charst = new HashMap<>();
        
        char c = 'c';
        for(int i = 0; i <  s.length(); i++){
            c = s.charAt(i);
            if(!charss.containsKey(c))
                charss.put(c, 1);
            else
                charss.put(c, charss.get(c) + 1);
        }
        
        for(int i = 0; i <  t.length(); i++){
            c = t.charAt(i);
            if(!charst.containsKey(c))
                charst.put(c, 1);
            else
                charst.put(c, charst.get(c) + 1);
        }
        
        for(Character key: charst.keySet()){
            if(!charss.containsKey(key)){
                c = key;
                break;
            }
            else if(charss.get(key) < charst.get(key)){
                c = key;
                break;
            }
        }
        
        return c;
    }

}
